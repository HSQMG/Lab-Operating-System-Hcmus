diff --git a/Makefile b/Makefile
index 365c91b..de1d085 100644
--- a/Makefile
+++ b/Makefile
@@ -30,7 +30,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+  $K/sysinfo.o \
 
 OBJS_KCSAN = \
   $K/start.o \
@@ -188,7 +189,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/answers-syscall.txt b/answers-syscall.txt
new file mode 100644
index 0000000..fcb82fe
--- /dev/null
+++ b/answers-syscall.txt
@@ -0,0 +1,16 @@
+q1 : syscall được gọi bởi hàm usertrap() trong kernel/trap.c
+
+q2 : giá trị của p->trapframe->a7 là 7. Số 7 chính là system call number, tương ứng với SYS_exec
+
+q3 : mode cpu trước đó là user mode, bởi spp bit là 0 (0x22 -> 100010)
+
+q4 : num = * (int *) 0;
+    80002052:	00002683          	lw	a3,0(zero) # 0 <_entry-0x80000000>
+
+     register a3 corresponds to num
+
+q5 : giá trị scause : 13 -> cho biết lỗi xảy ra là "load page fault" (chương trình cố gắng truy cập dữ liệu từ một địa chỉ bộ nhớ không hợp lệ), cụ thể là xảy ra lỗi khi tải dữ liệu từ địa chỉ bằng 0 vào thanh ghi a3. Nhưng địa chỉ 0 không hợp lệ trong kernel space (kernel space bắt đầu từ địa chỉ 0x80000000)
+p $scause -> $1 = 13
+
+q6 : name binary : initcode, pid=1
+
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..2f5a9a4 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,7 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
-
+struct sysinfo;
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          getfreemem(void);
+
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,7 +108,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+int             get_nproc(void);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -184,6 +186,8 @@ void            plic_complete(int);
 void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
+int             systeminfo(uint64);
+
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..7314925 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,27 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+uint64 getfreemem() {
+  struct run *r;
+  uint64 freemem = 0;
+
+  // Lấy khóa để truy cập tài nguyên chia sẻ
+  acquire(&kmem.lock);
+  
+  // Gán con trỏ r tới đầu danh sách liên kết kmem.freelist
+  r = kmem.freelist;
+  
+  while (r) {
+    // Tăng giá trị freemem lên PGSIZE cho mỗi nút trong danh sách
+    freemem += PGSIZE;
+    
+    // Cập nhật con trỏ r tới nút tiếp theo trong danh sách
+    r = r->next;
+  }
+  
+  // Giải phóng khóa truy cập tài nguyên chia sẻ
+  release(&kmem.lock);
+
+  // Trả về tổng lượng bộ nhớ trống
+  return freemem;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..afd6143 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  // trace
+  p->mask = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -320,6 +322,10 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+
+  //trace
+  np->mask = p->mask;
+
   release(&np->lock);
 
   return pid;
@@ -686,3 +692,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+int get_nproc() {
+  struct proc *p;
+  int count = 0;
+
+  // Lặp qua mảng các tiến trình từ proc[0] đến proc[NPROC-1]
+  for (p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);  // Chặn truy cập vào tiến trình bằng cách giữ khóa
+    
+    // Kiểm tra trạng thái của tiến trình
+    if (p->state != UNUSED) ++count;  // Nếu tiến trình không ở trạng thái UNUSED (chưa sử dụng), tăng biến đếm lên
+    
+    release(&p->lock);  // Giải phóng khóa để cho phép truy cập vào tiến trình
+  }
+
+  // Trả về tổng số lượng tiến trình hoạt động
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..9d7f9ea 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int mask;                    // Process mask
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..7361bbb 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,7 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,8 +127,10 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
-
+static char *syscall_name[]={"","fork","exit","wait","pipe","read","kill","exec","fstat","chdir","dup","getpid","sbrk","sleep","uptime","open","write","mknod","unlink","link","mkdir","close","trace","sysinfo"};
 void
 syscall(void)
 {
@@ -139,9 +142,13 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if ((p->mask >> num)%2==1) {
+	  printf("%d: syscall %s -> %d\n", 
+			  p->pid, syscall_name[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
-    p->trapframe->a0 = -1;
+            p->trapframe->a0 = -1;
   }
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c9025c8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
+
diff --git a/kernel/sysinfo.c b/kernel/sysinfo.c
new file mode 100644
index 0000000..4f4f18b
--- /dev/null
+++ b/kernel/sysinfo.c
@@ -0,0 +1,22 @@
+#include "types.h"
+#include "riscv.h"
+#include "param.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "sysinfo.h"
+#include "proc.h"
+
+// Hàm lấy thông tin hệ thống hiện tại
+// addr là một địa chỉ ảo của người dùng, trỏ đến một cấu trúc sysinfo.
+int
+systeminfo(uint64 addr) {
+  struct proc *p = myproc();
+  struct sysinfo info;
+
+  info.freemem = getfreemem();
+  info.nproc = get_nproc();
+
+  if(copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..21c7fc5 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,22 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int val;
+  argint(0,&val);
+  if(val<0) return -1;
+  myproc()->mask=val;
+  return 0;
+}
+
+uint64
+sys_sysinfo(void){
+  uint64 info;
+  argaddr(0,&info);
+  if(info<0)
+    return -1;
+  return systeminfo(info);
+}
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..2edeafb
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+20
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..32b304b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct sysinfo;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(struct sysinfo *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..353a1f8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
\ No newline at end of file
