diff --git a/answers-pgtbl.txt b/answers-pgtbl.txt
new file mode 100644
index 0000000..c948325
--- /dev/null
+++ b/answers-pgtbl.txt
@@ -0,0 +1,3 @@
+Câu 1: Which other xv6 system call(s) could be made faster using this shared page? Explain how.
+---> Bất kỳ system call nào trực tiếp hoặc gián tiếp gọi hàm copyout đều có thể được speedup.
+Bởi vì nó giúp tiết kiệm thời gian trong quá trình sao chép dữ liệu. 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..bdbd654 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t pagetable);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..5d8040f 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,10 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid == 1){
+    vmprint(p->pagetable);
+  }
+  
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..bc050d6 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -132,6 +132,12 @@ found:
     return 0;
   }
 
+  if((p->usyscall = (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -169,6 +175,10 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  if(p->usyscall)
+    kfree((void*)p->usyscall);
+  p->usyscall = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -202,6 +212,12 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  p->usyscall->pid = p->pid;
+  if(mappages(pagetable, USYSCALL, PGSIZE,(uint64)p->usyscall, PTE_R | PTE_U) < 0){
+    uvmunmap(pagetable, USYSCALL, 1, 0);
+    uvmfree(pagetable, 0);
+  }
+
   return pagetable;
 }
 
@@ -212,6 +228,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..03d1a91 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct usyscall *usyscall;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..100895e 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_A (1L << 6)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 88644b2..8b343ae 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -74,7 +74,26 @@ sys_sleep(void)
 int
 sys_pgaccess(void)
 {
-  // lab pgtbl: your code here.
+  uint64 vaddr;
+  int num;
+  uint64 res_addr;
+  argaddr(0, &vaddr);
+  argint(1, &num);
+  argaddr(2, &res_addr);
+
+  struct proc *p = myproc();
+  pagetable_t pagetable = p->pagetable;
+  uint64 res = 0;
+
+  for(int i = 0; i < num; i++){
+    pte_t* pte = walk(pagetable, vaddr + PGSIZE * i, 0);
+    if(*pte & PTE_A){
+      *pte &= (~PTE_A);
+      res |= (1L << i);
+    }
+  }
+
+  copyout(pagetable, res_addr, (char*)&res, sizeof(uint64));
   return 0;
 }
 #endif
@@ -100,3 +119,5 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..ad02602 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,3 +449,29 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void 
+vmprint(pagetable_t pagetable)
+{
+  printf("page table %p\n", pagetable);
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+      printf("..%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+      pagetable_t second = (pagetable_t)PTE2PA(pte);
+      for(int j = 0; j < 512; j++){
+        pte = second[j];
+        if(pte & PTE_V){
+          printf(".. ..%d: pte %p pa %p\n", j, pte, PTE2PA(pte));
+          pagetable_t third = (pagetable_t)PTE2PA(pte);
+          for(int k = 0; k < 512; k++){
+            pte = third[k];
+            if(pte & PTE_V){
+              printf(".. .. ..%d: pte %p pa %p\n", k, pte, PTE2PA(pte));
+            }
+          }
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..7ed6ff8
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+5
